package com.example.testdbbygreendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TASK_VIEW_ENTITY".
*/
public class TaskViewEntityDao extends AbstractDao<TaskViewEntity, String> {

    public static final String TABLENAME = "TASK_VIEW_ENTITY";

    /**
     * Properties of entity TaskViewEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Guid = new Property(0, String.class, "guid", true, "GUID");
        public final static Property TaskId = new Property(1, String.class, "taskId", false, "TASK_ID");
        public final static Property WorkDocId = new Property(2, String.class, "workDocId", false, "WORK_DOC_ID");
        public final static Property DocSubject = new Property(3, String.class, "docSubject", false, "DOC_SUBJECT");
        public final static Property FileId = new Property(4, String.class, "fileId", false, "FILE_ID");
        public final static Property CreateUser = new Property(5, String.class, "createUser", false, "CREATE_USER");
        public final static Property CreateDate = new Property(6, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(7, String.class, "updateDate", false, "UPDATE_DATE");
    };


    public TaskViewEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskViewEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_VIEW_ENTITY\" (" + //
                "\"GUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: guid
                "\"TASK_ID\" TEXT," + // 1: taskId
                "\"WORK_DOC_ID\" TEXT," + // 2: workDocId
                "\"DOC_SUBJECT\" TEXT," + // 3: docSubject
                "\"FILE_ID\" TEXT," + // 4: fileId
                "\"CREATE_USER\" TEXT," + // 5: createUser
                "\"CREATE_DATE\" TEXT," + // 6: createDate
                "\"UPDATE_DATE\" TEXT);"); // 7: updateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_VIEW_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TaskViewEntity entity) {
        stmt.clearBindings();
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(1, guid);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String workDocId = entity.getWorkDocId();
        if (workDocId != null) {
            stmt.bindString(3, workDocId);
        }
 
        String docSubject = entity.getDocSubject();
        if (docSubject != null) {
            stmt.bindString(4, docSubject);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(5, fileId);
        }
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(6, createUser);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(7, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(8, updateDate);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TaskViewEntity readEntity(Cursor cursor, int offset) {
        TaskViewEntity entity = new TaskViewEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // guid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // workDocId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // docSubject
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createUser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // updateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TaskViewEntity entity, int offset) {
        entity.setGuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkDocId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDocSubject(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateUser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TaskViewEntity entity, long rowId) {
        return entity.getGuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TaskViewEntity entity) {
        if(entity != null) {
            return entity.getGuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
